import typing as tp
import random

import dateparser

from docxpand.normalizer import (
    cut_and_pad_right,
    normalize_name,
)
from docxpand.utils import get_field_from_any_side


class Provider:

    filler: str = " "

    VALUES_MAP = {
        '0': 0,
        '1': 1,
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        'A': 10,
        'B': 11,
        'C': 12,
        'D': 13,
        'E': 14,
        'F': 15,
        'G': 16,
        'H': 17,
        'I': 18,
        'J': 19,
        'K': 20,
        'L': 21,
        'M': 22,
        'N': 23,
        'Ñ': 24,
        'O': 25,
        'P': 26,
        'Q': 27,
        'R': 28,
        'S': 29,
        'T': 30,
        'U': 31,
        'V': 32,
        'W': 33,
        'X': 34,
        'Y': 35,
        'Z': 36,
    }

    def get_score(self, string):
        """
        Calculate a score for a given string based on predefined character values.

        Args:
            string (str): The input string to be scored.

        Returns:
            int: The calculated score for the input string.
        """
        return sum(self.VALUES_MAP.get(char, 0) * (18 - i) for i, char in enumerate(string))

    def calculate_check_digit(self, curp):
        """
        Calculate the check digit for a given CURP (Clave Única de Registro de Población).

        The check digit is calculated based on the score derived from the CURP.
        If the score modulo 10 is zero, the check digit is '0'. Otherwise, it is
        the difference between 10 and the score modulo 10.

        Args:
            curp (str): The CURP for which to calculate the check digit.

        Returns:
            str: The calculated check digit.
        """
        score = self.get_score(curp)
        mod = score % 10
        if mod == 0:
            return '0'
        return str(10 - mod)

    def find_first_vowel(self, name: str) -> str:
        """
        Finds the first vowel in a given string.

        Args:
            name (str): The string to search for the first vowel.

        Returns:
            str: The first vowel found in the string. If no vowel is found, returns 'X'.
        """
        for char in name:
            if char in "AEIOU":
                return char
        return "X"

    def find_first_consonant(self, name: str) -> str:
        for char in name:
            if char not in "AEIOU":
                return char
        return "X"

    def curp(
        self,
        gender: str,
        existing_fields: tp.Optional[tp.Dict] = None,
    ) -> tp.List[str]:
        """Generate a Mexican CURP.

            Spanish-speaking countries (including Mexican full names) consist of three elements:

            Given name(s);
            First surname: the father's first surname; and
            Second surname: the mother's first surname.
            
            The CURP code is composed of 18 characters that are assigned as follows:

            The first surname's initial and first inside vowel;
            The second surname's initial (or the letter "X" if, like some foreign nationals, the person has no second surname);
            The first given name's initial;

            Date of birth (2 digits for year, 2 digits for month, and 2 digits for day);
            A one-letter gender indicator (H for male (hombre in Spanish), M for female (mujer in Spanish), or X for non-binary); [1]
            A two-letter code for the state where the person was born; for persons born abroad, the code NE (nacido en el extranjero) is used;

            The first surname's first inside consonant;
            The second surname's first inside consonant;
            The first given name's first inside consonant; and

            One character ranging from 0-9 for people born before 2000 or from A-Z for people born since 2000; this is generated by the National Population Registry to prevent identical entries.

            Control digit, which checks the validity of the previous 17 digits

        Args:
            existing_fields (tp.Optional[tp.Dict], optional): Existing fields to use. Defaults to None.
        
        Returns:
            tp.List[str]: List of lines for the CURP.
        """
        line_length = 18
        
        birth_date_raw = dateparser.parse(get_field_from_any_side(existing_fields, "birth_date", "01.01.1970"))
        birth_date = birth_date_raw.strftime("%y%m%d")

        random_char = None
        # One character ranging from 0-9 for people born before 2000 or from A-Z for people born since 2000; this is generated by the National Population Registry to prevent identical entries.
        if birth_date_raw.year < 2000:
            # Generate a random integer between 0 and 9 using Python random
            random_char = str(random.randint(0, 9))
        else:
            random_char = str(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))


        sex = {"male": "H", "female": "M", "nonbinary": "X"}[gender]

        state = get_field_from_any_side(existing_fields, "state", "NE")

        family_name = get_field_from_any_side(existing_fields, "family_name", "SAMPLE")
  
        family_name = normalize_name(family_name)
        first_surname = family_name[0]
        second_surname = family_name[1] if len(family_name) > 1 else "X"
        
        given_name = get_field_from_any_side(existing_fields, "given_name", "SAMPLE")
        given_name = normalize_name(given_name)

        given_name_first_part = given_name[0]

        # line_1
        line = (
            first_surname[0]
            + self.find_first_vowel(first_surname[1:])
            + second_surname[0]
            + given_name_first_part[0]
            + birth_date
            + sex
            + state
            + self.find_first_consonant(first_surname[1:])
            + self.find_first_consonant(second_surname[1:])
            + self.find_first_consonant(given_name_first_part[1:])
            + random_char
        )

        check_digit = self.calculate_check_digit(line)
        line += check_digit

        assert len(line) == line_length

        return line